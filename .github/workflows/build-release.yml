name: "Build Package"

on:
  push:
    tags:
      - 'v*'

jobs:
  check-dylib-cache:
    runs-on: ubuntu-latest
    outputs:
      cache-hit-x86: ${{ steps.cache-check-x86.outputs.cache-hit }}
      cache-hit-aarch64: ${{ steps.cache-check-aarch64.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: check-dylib-cache-x86
        id: cache-check-x86
        uses: actions/cache/restore@v4
        with:
          path: ./composeApp/dylib/darwin-x86-64/libMacosApi.dylib
          key: mac-dylib-darwin-x86-64-${{ hashFiles('**/*.swift', '**/dylib-mini-sys.properties') }}
          enableCrossOsArchive: true

      - name: check-dylib-cache-aarch64
        id: cache-check-aarch64
        uses: actions/cache/restore@v4
        with:
          path: ./composeApp/dylib/darwin-aarch64/libMacosApi.dylib
          key: mac-dylib-darwin-aarch64-${{ hashFiles('**/*.swift', '**/dylib-mini-sys.properties') }}
          enableCrossOsArchive: true

  build-macos:
    needs: check-dylib-cache
    runs-on: macos-latest
    if: needs.check-dylib-cache.outputs.cache-hit-x86 != 'true' && needs.check-dylib-cache.outputs.cache-hit-aarch64 != 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Swift environment
        run: brew install swift

      - name: Build dylib for x86_64
        run: |
          mkdir -p composeApp/dylib/darwin-x86-64
          swiftc -emit-library composeApp/src/desktopMain/swift/MacosApi.swift -target x86_64-apple-macos10.15 -o composeApp/dylib/darwin-x86-64/libMacosApi.dylib

      - name: Build dylib for arm64
        run: |
          mkdir -p composeApp/dylib/darwin-aarch64
          swiftc -emit-library composeApp/src/desktopMain/swift/MacosApi.swift -target arm64-apple-macos11 -o composeApp/dylib/darwin-aarch64/libMacosApi.dylib

      - name: Save dylib to cache for x86_64
        uses: actions/cache/save@v4
        with:
          path: ./composeApp/dylib/darwin-x86-64/libMacosApi.dylib
          key: mac-dylib-darwin-x86-64-${{ hashFiles('**/*.swift', '**/dylib-mini-sys.properties') }}
          enableCrossOsArchive: true

      - name: Save dylib to cache for arm64
        uses: actions/cache/save@v4
        with:
          path: ./composeApp/dylib/darwin-aarch64/libMacosApi.dylib
          key: mac-dylib-darwin-aarch64-${{ hashFiles('**/*.swift', '**/dylib-mini-sys.properties') }}
          enableCrossOsArchive: true

  build-ubuntu:
    needs: [check-dylib-cache, build-macos]
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && (success() || needs.build-macos.result == 'skipped') }}
    env:
      APPLE_ASP: ${{ secrets.APPLE_ASP }}
      AUTH_KEY_FILE_PATH: ${{ github.workspace }}/AuthKey.p8
      BUILD_FULL_PLATFORM: true
      BUILD_MAIN_PATH: ${{ github.workspace }}/composeApp/build/classes/kotlin/desktop/main
      GITHUB_REF: ${{ github.ref }}
      ISSUER_ID: ${{ secrets.ISSUER_ID }}
      KEY_ID: ${{ secrets.KEY_ID }}
      MAC_SIGNING_KEY_FILE_PATH: ${{ github.workspace }}/developerID_application.p12
      PRE_RELEASE: false
      RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      # https://github.com/actions/runner-images/issues/2840
      - name: Clear unnecessary files to free up space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"  

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install semver fs-extra

      - name: Validate and update version
        run: node .github/scripts/validateAndUpdateVersion.js

      - name: Set Revision
        run: |
          REVISION=$(git rev-list --count HEAD)
          echo "REVISION=$REVISION" >> $GITHUB_ENV
          echo -e "\nrevision=$REVISION" >> composeApp/src/desktopMain/resources/crosspaste-version.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          check-latest: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: >
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*',
            '**/gradle-wrapper.properties', '**/libs.versions.toml') }}

      - name: Cache Chrome Driver And Headless Shell
        uses: actions/cache@v4
        with:
          path: ./composeApp/resources
          key: chrome-driver-headless-shell-${{ hashFiles('**/webDriver.properties') }}

      - name: Cache Jetbrains Runtime JDK
        uses: actions/cache@v4
        with:
          path: ./composeApp/jbr
          key: jbr-${{ hashFiles('**/jbr.yaml') }}

      - name: check-darwin-x86-64-dylib-cache
        uses: actions/cache/restore@v4
        with:
          path: ./composeApp/dylib/darwin-x86-64/libMacosApi.dylib
          key: mac-dylib-darwin-x86-64-${{ hashFiles('**/*.swift', '**/dylib-mini-sys.properties') }}
          enableCrossOsArchive: true

      - name: check-darwin-aarch64-dylib-cache
        uses: actions/cache/restore@v4
        with:
          path: ./composeApp/dylib/darwin-aarch64/libMacosApi.dylib
          key: mac-dylib-darwin-aarch64-${{ hashFiles('**/*.swift', '**/dylib-mini-sys.properties') }}
          enableCrossOsArchive: true

      - name: Build with Gradle
        run: ./gradlew build

      - name: Prepare Conveyor
        run: |
          echo "${{ secrets.DEVELOPER_ID_APPLICATION }}" | base64 --decode > developerID_application.p12
          echo "${{ secrets.AUTH_KEY }}" | base64 --decode > AuthKey.p8

      - name: Conveyor build
        uses: hydraulic-software/conveyor/actions/build@v14.3
        with:
          command: make copied-site
          extra_flags: -f build.conveyor.conf
          signing_key: ${{ secrets.SIGNING_KEY }}
          agree_to_license: 1

      # conveyor default cache directory is .conveyor/cache
      # Avoid caching it, causing Github space payment
      - name: Cleanup Conveyor
        if: always()
        run: |
          rm -f developerID_application.p12
          rm -rf AuthKey.p8
          rm -rf .conveyor/cache/*

      - name: Display file tree with sizes
        run: |
          echo "Displaying the size of files and directories in 'output' directory:"
          du -ah output | sort -rh

      # delete output directory to free up space, Github Action only has 14G space,
      # to avoid the failure of insufficient space in the subsequent post recycling steps
      - name: Delete output directory
        run: rm -rf output
